{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from \"react\";\nimport axios from \"axios\";\nexport default function useUsers() {\n  _s();\n  const [users, setUsers] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [saving, setSaving] = useState(false);\n  const fetchUsers = useCallback(async () => {\n    console.log(\"[useUsers] fetchUsers chamado\");\n    setLoading(true);\n    try {\n      const res = await axios.get(\"http://localhost:4000/api/users\");\n      console.log(\"[useUsers] fetchUsers recebeu:\", res.data);\n      setUsers(res.data);\n    } catch (err) {\n      console.error(\"[useUsers] fetchUsers erro:\", err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  useEffect(() => {\n    console.log(\"[useUsers] useEffect -> fetchUsers\");\n    fetchUsers();\n  }, [fetchUsers]);\n  const addUser = async userData => {\n    console.log(\"[useUsers] addUser chamado com:\", userData);\n    setSaving(true);\n    try {\n      await axios.post(\"http://localhost:4000/api/users\", userData);\n      console.log(\"[useUsers] addUser - após POST, fetchUsers\");\n      await fetchUsers(); // Atualiza o estado após inserir novo user\n      console.log(\"[useUsers] addUser - estado users após fetchUsers:\", users);\n    } catch (err) {\n      console.error(\"[useUsers] addUser erro:\", err);\n    } finally {\n      setSaving(false);\n    }\n  };\n  const deleteUser = async id => {\n    console.log(\"[useUsers] deleteUser chamado com id:\", id);\n    try {\n      await axios.delete(`http://localhost:4000/api/users/${id}`);\n      await fetchUsers();\n      console.log(\"[useUsers] deleteUser - estado users após fetchUsers:\", users);\n    } catch (err) {\n      console.error(\"[useUsers] deleteUser erro:\", err);\n    }\n  };\n  return {\n    users,\n    loading,\n    saving,\n    addUser,\n    deleteUser\n  };\n}\n_s(useUsers, \"2ZM7WAzEftns7U6mXZ0j5khhQTM=\");","map":{"version":3,"names":["useState","useEffect","useCallback","axios","useUsers","_s","users","setUsers","loading","setLoading","saving","setSaving","fetchUsers","console","log","res","get","data","err","error","addUser","userData","post","deleteUser","id","delete"],"sources":["/Users/henriquedasilvalopes/Desktop/RNchallenge/client/src/hooks/useUsers.js"],"sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\nimport axios from \"axios\";\n\nexport default function useUsers() {\n  const [users, setUsers] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [saving, setSaving] = useState(false);\n\n  const fetchUsers = useCallback(async () => {\n    console.log(\"[useUsers] fetchUsers chamado\");\n    setLoading(true);\n    try {\n      const res = await axios.get(\"http://localhost:4000/api/users\");\n      console.log(\"[useUsers] fetchUsers recebeu:\", res.data);\n      setUsers(res.data);\n    } catch (err) {\n      console.error(\"[useUsers] fetchUsers erro:\", err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    console.log(\"[useUsers] useEffect -> fetchUsers\");\n    fetchUsers();\n  }, [fetchUsers]);\n\n  const addUser = async (userData) => {\n    console.log(\"[useUsers] addUser chamado com:\", userData);\n    setSaving(true);\n    try {\n      await axios.post(\"http://localhost:4000/api/users\", userData);\n      console.log(\"[useUsers] addUser - após POST, fetchUsers\");\n      await fetchUsers(); // Atualiza o estado após inserir novo user\n      console.log(\"[useUsers] addUser - estado users após fetchUsers:\", users);\n    } catch (err) {\n      console.error(\"[useUsers] addUser erro:\", err);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const deleteUser = async (id) => {\n    console.log(\"[useUsers] deleteUser chamado com id:\", id);\n    try {\n      await axios.delete(`http://localhost:4000/api/users/${id}`);\n      await fetchUsers();\n      console.log(\"[useUsers] deleteUser - estado users após fetchUsers:\", users);\n    } catch (err) {\n      console.error(\"[useUsers] deleteUser erro:\", err);\n    }\n  };\n\n  return { users, loading, saving, addUser, deleteUser };\n}\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACxD,OAAOC,KAAK,MAAM,OAAO;AAEzB,eAAe,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EACjC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACU,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAE3C,MAAMY,UAAU,GAAGV,WAAW,CAAC,YAAY;IACzCW,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;IAC5CL,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACF,MAAMM,GAAG,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAAC,iCAAiC,CAAC;MAC9DH,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEC,GAAG,CAACE,IAAI,CAAC;MACvDV,QAAQ,CAACQ,GAAG,CAACE,IAAI,CAAC;IACpB,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZL,OAAO,CAACM,KAAK,CAAC,6BAA6B,EAAED,GAAG,CAAC;IACnD,CAAC,SAAS;MACRT,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,EAAE,CAAC;EAENR,SAAS,CAAC,MAAM;IACdY,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;IACjDF,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,CAACA,UAAU,CAAC,CAAC;EAEhB,MAAMQ,OAAO,GAAG,MAAOC,QAAQ,IAAK;IAClCR,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEO,QAAQ,CAAC;IACxDV,SAAS,CAAC,IAAI,CAAC;IACf,IAAI;MACF,MAAMR,KAAK,CAACmB,IAAI,CAAC,iCAAiC,EAAED,QAAQ,CAAC;MAC7DR,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC;MACzD,MAAMF,UAAU,CAAC,CAAC,CAAC,CAAC;MACpBC,OAAO,CAACC,GAAG,CAAC,oDAAoD,EAAER,KAAK,CAAC;IAC1E,CAAC,CAAC,OAAOY,GAAG,EAAE;MACZL,OAAO,CAACM,KAAK,CAAC,0BAA0B,EAAED,GAAG,CAAC;IAChD,CAAC,SAAS;MACRP,SAAS,CAAC,KAAK,CAAC;IAClB;EACF,CAAC;EAED,MAAMY,UAAU,GAAG,MAAOC,EAAE,IAAK;IAC/BX,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAEU,EAAE,CAAC;IACxD,IAAI;MACF,MAAMrB,KAAK,CAACsB,MAAM,CAAC,mCAAmCD,EAAE,EAAE,CAAC;MAC3D,MAAMZ,UAAU,CAAC,CAAC;MAClBC,OAAO,CAACC,GAAG,CAAC,uDAAuD,EAAER,KAAK,CAAC;IAC7E,CAAC,CAAC,OAAOY,GAAG,EAAE;MACZL,OAAO,CAACM,KAAK,CAAC,6BAA6B,EAAED,GAAG,CAAC;IACnD;EACF,CAAC;EAED,OAAO;IAAEZ,KAAK;IAAEE,OAAO;IAAEE,MAAM;IAAEU,OAAO;IAAEG;EAAW,CAAC;AACxD;AAAClB,EAAA,CAnDuBD,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}